<!DOCTYPE html>
<!--
CBSproblem.html
Copyright Jim Smith, UWE June 2015.

definition of the elements of the CBS problem with the jointJS script to display the UML 
-->

<html>
    <head>

        <link rel="canonical" href="http://www.jointjs.com/" />
        <meta name="description" content="IPAT Demo: Software Class Model Evolution for the Cinema Booking System Problem" />
        <meta name="keywords" content="IPAT,JointJS, JavaScript, diagrams, diagramming library, UML, charts" />

        <link href="http://fonts.googleapis.com/css?family=Source+Sans+Pro:400,700" rel="stylesheet" type="text/css" />
        <link rel="stylesheet" href="http://www.jointjs.com/css/style.css" />
        <link rel="stylesheet" href="http://www.jointjs.com/css/joint.css" />
        <link rel="stylesheet" href="http://www.jointjs.com/css/tutorial.css" />

        <link rel="shortcut icon" href="IPAT Demo: Software Class Model Evolution for the Cinema Booking System Problem/favicon.ico" type="image/x-icon">
        <link rel="icon" href="IPAT Demo: Software Class Model Evolution for the Cinema Booking System Problem/favicon.ico" type="image/x-icon">

        <title>IPAT Demo: Software Class Model Evolution for the Cinema Booking System Problem.</title>
        
    </head>
    <body>
   


        <section id="Elements">

          <div id="elements-sidebar" class="content-sidebar">
  <script>
if (window.XMLHttpRequest)
  {// code for IE7+, Firefox, Chrome, Opera, Safari
  xmlhttp=new XMLHttpRequest();
  }
else
  {// code for IE6, IE5
  xmlhttp=new ActiveXObject("Microsoft.XMLHTTP");
  }
xmlhttp.open("GET","CBSproblem.xml",false);
xmlhttp.send();
xmlDoc=xmlhttp.responseXML; 
var x=xmlDoc.getElementsByTagName("designElement");
 
document.write("<table><tr><th>Name</th><th>type</th></tr>");

for (i=0;i<x.length;i++)
  { 
      document.write("<td>");
  document.write(x[i].getElementsByTagName("name")[0].childNodes[0].nodeValue);
  document.write("</td><td>");
  document.write(x[i].getElementsByTagName("type")[0].childNodes[0].nodeValue);
  document.write("</td></tr>");
  }
document.write("</table>");


var y=xmlDoc.getElementsByTagName("designUse");
 
document.write("<table><tr><th>Method</th><th>Attribute</th></tr>");

for (i=0;i<y.length;i++)
  { 
      document.write("<td>");
  document.write(y[i].getElementsByTagName("methodName")[0].childNodes[0].nodeValue);
  document.write("</td><td>");
  document.write(y[i].getElementsByTagName("attributeName")[0].childNodes[0].nodeValue);
  document.write("</td></tr>");
  }
document.write("</table>");
</script>
</div>


          <div id="pn" class="content-container">
  <h1>The Class Diagram</h1>
  <div id="paper" class="paper"/>
</div>
<script src="http://www.jointjs.com/js/joint.js"></script>
<script src="http://www.jointjs.com/js/joint.shapes.uml.js"></script>

<script>
    var graph = new joint.dia.Graph;

var paper = new joint.dia.Paper({
    el: $('#paper'),
    width: 800,
    height: 600,
    gridSize: 1,
    model: graph
});


var uml = joint.shapes.uml;

var classes = {

};

_.each(classes, function(c) { graph.addCell(c); });

var relations = [
    new uml.Generalization({ source: { id: classes.man.id }, target: { id: classes.person.id }}),
    new uml.Generalization({ source: { id: classes.woman.id }, target: { id: classes.person.id }}),
    new uml.Implementation({ source: { id: classes.person.id }, target: { id: classes.mammal.id }}),
    new uml.Aggregation({ source: { id: classes.person.id }, target: { id: classes.address.id }}),
    new uml.Composition({ source: { id: classes.person.id }, target: { id: classes.bloodgroup.id }})
];

_.each(relations, function(r) { graph.addCell(r); });
</script>



        </section>

   


        <link rel="stylesheet" href="http://www.jointjs.com/vendor/prism/prism.css" type="text/css" />
        <script src="http://www.jointjs.com/vendor/prism/prism.js"></script>
    </body>
</html>
